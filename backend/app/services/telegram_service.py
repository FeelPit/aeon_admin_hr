import os
import asyncio
from telegram import Bot
from telegram.error import TelegramError
from dotenv import load_dotenv
from app.database import Candidate, Notification

load_dotenv()

class TelegramService:
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.bot = Bot(token=self.bot_token) if self.bot_token else None
    
    async def send_message(self, candidate: Candidate, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –≤ Telegram"""
        if not self.bot or not candidate.telegram_username:
            return False
        
        try:
            chat_id = f"@{candidate.telegram_username}"
            await self.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_notification(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É"""
        if not self.bot or not self.chat_id:
            return False
        
        try:
            message = f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
            message += f"–¢–∏–ø: {notification.type}\n"
            message += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {notification.message}\n"
            message += f"–í—Ä–µ–º—è: {notification.created_at.strftime('%d.%m.%Y %H:%M')}"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_test_invitation(self, candidate: Candidate):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç"""
        message = f"üéØ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç</b>\n\n"
        message += f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate.full_name}!\n\n"
        message += "–í–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Å–æ—Ñ—Ç-—Å–∫–∏–ª–ª–∞–º.\n"
        message += "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç: https://forms.gle/example\n\n"
        message += "–£–¥–∞—á–∏! üöÄ"
        
        return await self.send_message(candidate, message)
    
    async def send_feedback(self, candidate: Candidate, feedback: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É"""
        message = f"üìù <b>–§–∏–¥–±—ç–∫ –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
        message += f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate.full_name}!\n\n"
        message += f"{feedback}\n\n"
        message += "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üôè"
        
        return await self.send_message(candidate, message)
    
    async def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.bot or not self.chat_id:
            return False
        
        try:
            message = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
            message += "HR-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def create_webview_url(self, candidate_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å URL –¥–ª—è WebView —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        base_url = os.getenv("FRONTEND_URL", "http://localhost:3000")
        return f"{base_url}/candidate/{candidate_id}"
    
    async def send_candidate_card_link(self, candidate: Candidate):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        if not self.bot or not self.chat_id:
            return False
        
        try:
            webview_url = self.create_webview_url(candidate.id)
            
            message = f"üë§ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>\n\n"
            message += f"–ò–º—è: {candidate.full_name}\n"
            message += f"–°—Ç–∞—Ç—É—Å: {candidate.status}\n"
            message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {candidate.last_action_type}\n\n"
            message += f"<a href='{webview_url}'>–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</a>"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: {e}")
            return False 
    
    async def send_candidate_data_formatted(self, candidate: Candidate, format: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Telegram –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (csv, md, json)"""
        if not self.bot or not candidate.telegram_username:
            return False
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {
            'ID': candidate.id,
            '–§–ò–û': candidate.full_name,
            'Telegram': candidate.telegram_username or '',
            'Email': candidate.email or '',
            '–¢–µ–ª–µ—Ñ–æ–Ω': candidate.phone or '',
            '–°—Ç–∞—Ç—É—Å': candidate.status,
            '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ': candidate.last_action_type or '',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': candidate.created_at.strftime('%Y-%m-%d %H:%M') if candidate.created_at else '',
            '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': candidate.updated_at.strftime('%Y-%m-%d %H:%M') if candidate.updated_at else '',
        }
        if format == 'csv':
            text = ','.join(data.keys()) + '\n' + ','.join(str(v) for v in data.values())
        elif format == 'md':
            text = '### –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞\n' + '\n'.join([f'- **{k}:** {v}' for k, v in data.items()])
        elif format == 'json':
            import json
            text = json.dumps(data, ensure_ascii=False, indent=2)
        else:
            text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        try:
            chat_id = f"@{candidate.telegram_username}"
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=None if format == 'json' or format == 'csv' else 'Markdown'
            )
            return True
        except TelegramError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            return False 