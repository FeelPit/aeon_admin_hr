#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import bcrypt
from app.database import SessionLocal, Candidate, InterviewLog, Comment, User
from datetime import datetime, timedelta
import random

def create_test_candidates():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    db = SessionLocal()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    test_candidates = [
        {
            "full_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            "telegram_username": "@ivan_dev",
            "email": "ivan.ivanov@example.com",
            "phone": "+7 (999) 123-45-67",
            "status": "–æ–∂–∏–¥–∞–µ—Ç"
        },
        {
            "full_name": "–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞",
            "telegram_username": "@anna_hr",
            "email": "anna.petrova@example.com",
            "phone": "+7 (999) 234-56-78",
            "status": "–ø—Ä–∏–≥–ª–∞—à—ë–Ω"
        },
        {
            "full_name": "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á",
            "telegram_username": "@alex_developer",
            "email": "alex.sidorov@example.com",
            "phone": "+7 (999) 345-67-89",
            "status": "–ø—Ä–æ—à—ë–ª"
        },
        {
            "full_name": "–ö–æ–∑–ª–æ–≤–∞ –ú–∞—Ä–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞",
            "telegram_username": "@maria_design",
            "email": "maria.kozlova@example.com",
            "phone": "+7 (999) 456-78-90",
            "status": "–æ—Ç–∫–ª–æ–Ω—ë–Ω"
        },
        {
            "full_name": "–í–æ–ª–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
            "telegram_username": "@dmitry_qa",
            "email": "dmitry.volkov@example.com",
            "phone": "+7 (999) 567-89-01",
            "status": "–æ–∂–∏–¥–∞–µ—Ç"
        },
        {
            "full_name": "–°–º–∏—Ä–Ω–æ–≤–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
            "telegram_username": "@elena_manager",
            "email": "elena.smirnova@example.com",
            "phone": "+7 (999) 678-90-12",
            "status": "–ø—Ä–∏–≥–ª–∞—à—ë–Ω"
        },
        {
            "full_name": "–ù–æ–≤–∏–∫–æ–≤ –ê—Ä—Ç—ë–º –ò–≥–æ—Ä–µ–≤–∏—á",
            "telegram_username": "@artem_frontend",
            "email": "artem.novikov@example.com",
            "phone": "+7 (999) 789-01-23",
            "status": "–ø—Ä–æ—à—ë–ª"
        },
        {
            "full_name": "–ú–æ—Ä–æ–∑–æ–≤–∞ –ö—Ä–∏—Å—Ç–∏–Ω–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞",
            "telegram_username": "@kristina_analyst",
            "email": "kristina.morozova@example.com",
            "phone": "+7 (999) 890-12-34",
            "status": "–æ–∂–∏–¥–∞–µ—Ç"
        },
        {
            "full_name": "–õ–µ–±–µ–¥–µ–≤ –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á",
            "telegram_username": "@sergey_backend",
            "email": "sergey.lebedev@example.com",
            "phone": "+7 (999) 901-23-45",
            "status": "–ø—Ä–∏–≥–ª–∞—à—ë–Ω"
        },
        {
            "full_name": "–°–æ–∫–æ–ª–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ü–∞–≤–ª–æ–≤–Ω–∞",
            "telegram_username": "@nastya_marketing",
            "email": "anastasia.sokolova@example.com",
            "phone": "+7 (999) 012-34-56",
            "status": "–ø—Ä–æ—à—ë–ª"
        }
    ]
    
    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
    interview_questions = [
        {
            "question": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å Python",
            "answer": "–†–∞–±–æ—Ç–∞—é —Å Python —É–∂–µ 3 –≥–æ–¥–∞, –∑–Ω–∞—é Django, FastAPI, SQLAlchemy",
            "score": 8,
            "category": "–Ω–∞–≤—ã–∫–∏"
        },
        {
            "question": "–ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
            "answer": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ö–æ—Ä–æ—à–∞—è –∫–æ–º–∞–Ω–¥–∞",
            "score": 9,
            "category": "–º–æ—Ç–∏–≤–∞—Ü–∏—è"
        },
        {
            "question": "–ö–∞–∫ —Ä–µ—à–∞–µ—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –∫–æ–º–∞–Ω–¥–µ?",
            "answer": "–°—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å, –≤—ã—Å–ª—É—à–∞—Ç—å –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã",
            "score": 7,
            "category": "–≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å"
        },
        {
            "question": "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
            "answer": "–ò–Ω–æ–≥–¥–∞ —Å–ª–∏—à–∫–æ–º –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç, –Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º",
            "score": 8,
            "category": "—á–µ—Å—Ç–Ω–æ—Å—Ç—å"
        }
    ]
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ HR
    hr_comments = [
        "–û—Ç–ª–∏—á–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫ –Ω–∞–π–º—É",
        "–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é, –Ω–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø—ã—Ç—É",
        "–û—á–µ–Ω—å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç",
        "–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
    ]
    
    created_candidates = []
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        for i, candidate_data in enumerate(test_candidates):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            days_ago = random.randint(0, 30)
            created_at = datetime.utcnow() - timedelta(days=days_ago)
            
            candidate = Candidate(
                **candidate_data,
                created_at=created_at,
                updated_at=created_at,
                last_action_date=created_at
            )
            
            db.add(candidate)
            db.commit()
            db.refresh(candidate)
            created_candidates.append(candidate)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {candidate.full_name} (ID: {candidate.id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            if candidate.status in ["–ø—Ä–æ—à—ë–ª", "–ø—Ä–∏–≥–ª–∞—à—ë–Ω"]:
                for j, question_data in enumerate(interview_questions):
                    if random.random() > 0.3:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
                        interview_log = InterviewLog(
                            candidate_id=candidate.id,
                            **question_data,
                            created_at=created_at + timedelta(hours=j+1)
                        )
                        db.add(interview_log)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π HR
                comment = Comment(
                    candidate_id=candidate.id,
                    hr_comment=random.choice(hr_comments),
                    created_at=created_at + timedelta(hours=2)
                )
                db.add(comment)
            
            db.commit()
        
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_candidates)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤!")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statuses = db.query(Candidate.status).all()
        status_count = {}
        for status in statuses:
            status_count[status[0]] = status_count.get(status[0], 0) + 1
        
        for status, count in status_count.items():
            print(f"  ‚Ä¢ {status}: {count} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()


def create_admin_user():
    db = SessionLocal()
    email = "admin@example.com"
    password = "admin123"
    name = "Admin"
    hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
    if not db.query(User).filter(User.email == email).first():
        user = User(name=name, email=email, password=hashed_password)
        db.add(user)
        db.commit()
        print(f"‚úÖ Admin user created: {email} / {password}")
    else:
        print("Admin user already exists.")
    db.close()

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    # create_test_candidates()
    create_admin_user()
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.") 