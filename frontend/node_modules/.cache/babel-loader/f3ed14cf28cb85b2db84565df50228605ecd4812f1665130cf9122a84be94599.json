{"ast":null,"code":"import{useState,useEffect}from'react';import{retrieveRawInitData}from'@telegram-apps/sdk';export const useTelegramAuth=()=>{const[user,setUser]=useState(null);const[token,setToken]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const authenticate=async()=>{try{setLoading(true);setError(null);// Получаем init_data от Telegram\nconst initDataRaw=retrieveRawInitData();console.log('Retrieved init_data:',initDataRaw);if(!initDataRaw){throw new Error('Не удалось получить данные от Telegram');}// Отправляем запрос на аутентификацию\nconst response=await fetch('/api/telegram/telegram-auth',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({init_data:initDataRaw})});if(!response.ok){const errorData=await response.json();console.error('Auth error response:',errorData);throw new Error(errorData.detail||'Ошибка аутентификации');}const data=await response.json();console.log('Auth success:',data);console.log('User is_admin:',data.user.is_admin);console.log('User is_admin type:',typeof data.user.is_admin);// Сохраняем токен и данные пользователя\nsetToken(data.access_token);setUser(data.user);localStorage.setItem('access_token',data.access_token);localStorage.setItem('user',JSON.stringify(data.user));return data;}catch(err){const errorMessage=err instanceof Error?err.message:'Неизвестная ошибка';console.error('Authentication error:',err);setError(errorMessage);throw err;}finally{setLoading(false);}};const logout=()=>{setToken(null);setUser(null);localStorage.removeItem('access_token');localStorage.removeItem('user');};const checkAuth=async()=>{const savedToken=localStorage.getItem('access_token');const savedUser=localStorage.getItem('user');if(savedToken&&savedUser){try{console.log('Found saved user data:',savedUser);const parsedUser=JSON.parse(savedUser);console.log('Parsed user data:',parsedUser);console.log('Parsed user is_admin:',parsedUser.is_admin);// Проверяем валидность токена\nconst response=await fetch('/api/telegram/profile',{headers:{Authorization:`Bearer ${savedToken}`}});if(response.ok){const userData=await response.json();console.log('Profile check - user data:',userData);console.log('Profile check - is_admin:',userData.is_admin);console.log('Profile check - is_admin type:',typeof userData.is_admin);setToken(savedToken);setUser(userData);}else{// Токен недействителен, очищаем\nlogout();}}catch(err){logout();}}else{// Пытаемся аутентифицироваться через Telegram\ntry{await authenticate();}catch(err){// Если аутентификация не удалась, оставляем пользователя неавторизованным\nconsole.log('Telegram аутентификация недоступна:',err);}}setLoading(false);};useEffect(()=>{checkAuth();},[]);return{user,token,loading,error,authenticate,logout,checkAuth};};","map":{"version":3,"names":["useState","useEffect","retrieveRawInitData","useTelegramAuth","user","setUser","token","setToken","loading","setLoading","error","setError","authenticate","initDataRaw","console","log","Error","response","fetch","method","headers","body","JSON","stringify","init_data","ok","errorData","json","detail","data","is_admin","access_token","localStorage","setItem","err","errorMessage","message","logout","removeItem","checkAuth","savedToken","getItem","savedUser","parsedUser","parse","Authorization","userData"],"sources":["/Users/antonver/aeon_admin_hr-1/frontend/src/hooks/useTelegramAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { retrieveRawInitData } from '@telegram-apps/sdk';\n\ninterface TelegramUser {\n  id: number;\n  name: string;\n  email?: string;\n  telegram_id?: string;\n  telegram_username?: string;\n  is_admin: boolean;\n}\n\ninterface AuthResponse {\n  access_token: string;\n  token_type: string;\n  user: TelegramUser;\n}\n\nexport const useTelegramAuth = () => {\n  const [user, setUser] = useState<TelegramUser | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const authenticate = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Получаем init_data от Telegram\n      const initDataRaw = retrieveRawInitData();\n      \n      console.log('Retrieved init_data:', initDataRaw);\n      \n      if (!initDataRaw) {\n        throw new Error('Не удалось получить данные от Telegram');\n      }\n\n      // Отправляем запрос на аутентификацию\n      const response = await fetch('/api/telegram/telegram-auth', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          init_data: initDataRaw,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Auth error response:', errorData);\n        throw new Error(errorData.detail || 'Ошибка аутентификации');\n      }\n\n      const data: AuthResponse = await response.json();\n      console.log('Auth success:', data);\n      console.log('User is_admin:', data.user.is_admin);\n      console.log('User is_admin type:', typeof data.user.is_admin);\n      \n      // Сохраняем токен и данные пользователя\n      setToken(data.access_token);\n      setUser(data.user);\n      localStorage.setItem('access_token', data.access_token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      \n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Неизвестная ошибка';\n      console.error('Authentication error:', err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n  };\n\n  const checkAuth = async () => {\n    const savedToken = localStorage.getItem('access_token');\n    const savedUser = localStorage.getItem('user');\n\n    if (savedToken && savedUser) {\n      try {\n        console.log('Found saved user data:', savedUser);\n        const parsedUser = JSON.parse(savedUser);\n        console.log('Parsed user data:', parsedUser);\n        console.log('Parsed user is_admin:', parsedUser.is_admin);\n        \n        // Проверяем валидность токена\n        const response = await fetch('/api/telegram/profile', {\n          headers: {\n            Authorization: `Bearer ${savedToken}`,\n          },\n        });\n\n        if (response.ok) {\n          const userData = await response.json();\n          console.log('Profile check - user data:', userData);\n          console.log('Profile check - is_admin:', userData.is_admin);\n          console.log('Profile check - is_admin type:', typeof userData.is_admin);\n          setToken(savedToken);\n          setUser(userData);\n        } else {\n          // Токен недействителен, очищаем\n          logout();\n        }\n      } catch (err) {\n        logout();\n      }\n    } else {\n      // Пытаемся аутентифицироваться через Telegram\n      try {\n        await authenticate();\n      } catch (err) {\n        // Если аутентификация не удалась, оставляем пользователя неавторизованным\n        console.log('Telegram аутентификация недоступна:', err);\n      }\n    }\n    \n    setLoading(false);\n  };\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  return {\n    user,\n    token,\n    loading,\n    error,\n    authenticate,\n    logout,\n    checkAuth,\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}