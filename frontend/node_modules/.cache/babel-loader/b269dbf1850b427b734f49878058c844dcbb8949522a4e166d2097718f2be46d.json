{"ast":null,"code":"function y(o) {\n  return o.replace(/[A-Z]/g, e => `-${e.toLowerCase()}`);\n}\nfunction C(o) {\n  return o.replace(/[A-Z]/g, e => `_${e.toLowerCase()}`);\n}\nfunction S(o) {\n  return Object.entries(o).reduce((e, _ref) => {\n    let [r, t] = _ref;\n    return e[C(r)] = t, e;\n  }, {});\n}\nfunction $(o) {\n  return o.replace(/_[a-z]/g, e => e[1].toUpperCase());\n}\nfunction h(o) {\n  return Object.entries(o).reduce((e, _ref2) => {\n    let [r, t] = _ref2;\n    return e[$(r)] = t, e;\n  }, {});\n}\nfunction f(o) {\n  const e = h(o);\n  for (const r in e) {\n    const t = e[r];\n    t && typeof t == \"object\" && !(t instanceof Date) && (e[r] = Array.isArray(t) ? t.map(f) : f(t));\n  }\n  return e;\n}\nfunction k(o) {\n  return o.replace(/_([a-z])/g, (e, r) => `-${r.toLowerCase()}`);\n}\nfunction g(o) {\n  return `tapps/${o}`;\n}\nfunction w(o, e) {\n  sessionStorage.setItem(g(o), JSON.stringify(e));\n}\nfunction T(o) {\n  const e = sessionStorage.getItem(g(o));\n  try {\n    return e ? JSON.parse(e) : void 0;\n  } catch {}\n}\nfunction L() {\n  for (var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++) {\n    o[_key] = arguments[_key];\n  }\n  const e = o.flat(1);\n  return [e.push.bind(e), () => {\n    e.forEach(r => {\n      r();\n    });\n  }];\n}\n// @__NO_SIDE_EFFECTS__\nfunction O(o, e) {\n  e || (e = {});\n  const {\n      textColor: r,\n      bgColor: t,\n      shouldLog: s\n    } = e,\n    c = s === void 0 ? !0 : s,\n    d = typeof c == \"boolean\" ? () => c : c,\n    u = function (n, a) {\n      if (a || d()) {\n        const l = \"font-weight:bold;padding:0 5px;border-radius:100px\",\n          [b, m, p] = {\n            log: [\"#0089c3\", \"white\", \"INFO\"],\n            error: [\"#ff0000F0\", \"white\", \"ERR\"],\n            warn: [\"#D38E15\", \"white\", \"WARN\"]\n          }[n];\n        for (var _len2 = arguments.length, i = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          i[_key2 - 2] = arguments[_key2];\n        }\n        console[n](`%c${p} ${Intl.DateTimeFormat(\"en-GB\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          fractionalSecondDigits: 3,\n          timeZone: \"UTC\"\n        }).format(/* @__PURE__ */new Date())}%c %c${o}`, `${l};background-color:${b};color:${m}`, \"\", `${l};${r ? `color:${r};` : \"\"}${t ? `background-color:${t}` : \"\"}`, ...i);\n      }\n    };\n  return [[\"log\", \"forceLog\"], [\"warn\", \"forceWarn\"], [\"error\", \"forceError\"]].reduce((n, _ref3) => {\n    let [a, i] = _ref3;\n    return n[a] = u.bind(void 0, a, !1), n[i] = u.bind(void 0, a, !0), n;\n  }, {});\n}\nexport { y as camelToKebab, C as camelToSnake, S as camelToSnakeObjKeys, L as createCbCollector, O as createLogger, f as deepSnakeToCamelObjKeys, T as getStorageValue, w as setStorageValue, $ as snakeToCamel, h as snakeToCamelObjKeys, k as snakeToKebab };","map":{"version":3,"names":["y","o","replace","e","toLowerCase","C","S","Object","entries","reduce","_ref","r","t","$","toUpperCase","h","_ref2","f","Date","Array","isArray","map","k","g","w","sessionStorage","setItem","JSON","stringify","T","getItem","parse","L","_len","arguments","length","_key","flat","push","bind","forEach","O","textColor","bgColor","shouldLog","s","c","d","u","print","n","a","l","b","m","p","log","error","warn","_len2","i","_key2","console","Intl","DateTimeFormat","hour","minute","second","fractionalSecondDigits","timeZone","format","_ref3"],"sources":["/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/camelToKebab.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/camelToSnake.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/camelToSnakeObjKeys.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/snakeToCamel.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/snakeToCamelObjKeys.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/deepSnakeToCamelObjKeys.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/casing/snakeToKebab.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/storage/storage.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/createCbCollector.ts","/Users/antonver/aeon_admin_hr-1/frontend/node_modules/@telegram-apps/toolkit/src/createLogger.ts"],"sourcesContent":["/**\n * Converts string value from camel case to kebab case.\n * @param value - value to convert.\n */\nexport function camelToKebab(value: string): string {\n  return value.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\n}\n","export type CamelToSnakeCase<T extends string> = T extends `${infer First}${infer Rest}`\n  ? `${First extends Capitalize<First> ? '_' : ''}${Lowercase<First>}${CamelToSnakeCase<Rest>}`\n  : T;\n\n/**\n * Converts string value from camel case to snake case.\n * @param value - value to convert.\n */\nexport function camelToSnake<T extends string>(value: T): CamelToSnakeCase<T> {\n  return value.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`) as CamelToSnakeCase<T>;\n}","import { camelToSnake, type CamelToSnakeCase } from '@/casing/camelToSnake.js';\n\nexport type ConvertCamelKeysToSnakeCase<T> = {\n  [K in keyof T as CamelToSnakeCase<string & K>]: T[K];\n};\n\n/**\n * Converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function camelToSnakeObjKeys<T extends object>(value: T): ConvertCamelKeysToSnakeCase<T> {\n  return Object.entries(value).reduce<ConvertCamelKeysToSnakeCase<T>>((acc, [k, v]) => {\n    acc[camelToSnake(k) as keyof ConvertCamelKeysToSnakeCase<T>] = v;\n    return acc;\n  }, {} as ConvertCamelKeysToSnakeCase<T>);\n}","export type SnakeToCamelCase<S extends string> =\n  S extends `${infer Head}_${infer Tail}`\n    ? `${Head}${Capitalize<SnakeToCamelCase<Tail>>}`\n    : S;\n\n/**\n * Converts string value from snake case to camel case.\n * @param value - value to convert.\n */\nexport function snakeToCamel<T extends string>(value: T): SnakeToCamelCase<T> {\n  return value.replace(/_[a-z]/g, (m) => m[1].toUpperCase()) as SnakeToCamelCase<T>;\n}","import { snakeToCamel, type SnakeToCamelCase } from '@/casing/snakeToCamel.js';\n\nexport type ConvertSnakeKeysToCamelCase<T> = {\n  [K in keyof T as SnakeToCamelCase<string & K>]: T[K];\n};\n\n/**\n * Converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function snakeToCamelObjKeys<T extends object>(value: T): ConvertSnakeKeysToCamelCase<T> {\n  return Object.entries(value).reduce<ConvertSnakeKeysToCamelCase<T>>((acc, [k, v]) => {\n    acc[snakeToCamel(k) as keyof ConvertSnakeKeysToCamelCase<T>] = v;\n    return acc;\n  }, {} as ConvertSnakeKeysToCamelCase<T>);\n}","import { snakeToCamelObjKeys } from '@/casing/snakeToCamelObjKeys.js';\nimport type { SnakeToCamelCase } from '@/casing/snakeToCamel.js';\n\nexport type DeepConvertSnakeKeysToCamelCase<T> = T extends infer U\n    ? U extends object\n      ? U extends Date\n        ? U\n        : U extends (infer Item)[]\n          ? DeepConvertSnakeKeysToCamelCase<Item>[]\n          : {\n            [K in keyof U as SnakeToCamelCase<string & K>]: DeepConvertSnakeKeysToCamelCase<U[K]>\n          } & {}\n      : U\n    : T;\n\n/**\n * Deeply converts object keys from snake to camel case.\n * @param value - value to convert.\n */\nexport function deepSnakeToCamelObjKeys<T extends object>(\n  value: T,\n): DeepConvertSnakeKeysToCamelCase<T> {\n  const camelCased = snakeToCamelObjKeys(value);\n  for (const key in camelCased) {\n    const value = camelCased[key];\n    if (value && typeof value === 'object' && !(value instanceof Date)) {\n      (camelCased as any)[key] = Array.isArray(value)\n        ? value.map(deepSnakeToCamelObjKeys)\n        : deepSnakeToCamelObjKeys(value);\n    }\n  }\n  return camelCased as DeepConvertSnakeKeysToCamelCase<T>;\n}","/**\n * Converts string value from snake case to kebab case.\n * @param value - value to convert.\n */\nexport function snakeToKebab(value: string): string {\n  return value.replace(/_([a-z])/g, (_, letter) => `-${letter.toLowerCase()}`);\n}\n","/**\n * Converts a passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: string): string {\n  return `tapps/${key}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<T>(key: string, value: T): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<R>(key: string): R | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as R : undefined;\n  } catch {\n  }\n}\n","export type CallbackFn = () => void;\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCbCollector(...cbs: (CallbackFn | CallbackFn[])[]): [\n  add: (...fns: CallbackFn[]) => void,\n  call: () => void,\n] {\n  const callbacks = cbs.flat(1);\n\n  return [\n    callbacks.push.bind(callbacks),\n    () => {\n      callbacks.forEach(cb => {\n        cb();\n      });\n    },\n  ];\n}","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error' | 'warn';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n  /**\n   * True if logs are enabled.\n   * @default true\n   */\n  shouldLog?: boolean | (() => boolean);\n}\n\nexport type LoggerFn = (...args: any[]) => void;\nexport type LoggerForceFn = (...args: any[]) => void;\n\nexport interface Logger {\n  /**\n   * Prints an error message into the console.\n   * @param args - items to log.\n   */\n  error: LoggerFn;\n  /**\n   * Prints an error message into the console ignoring the `shouldLog`\n   * constructor option.\n   * @param args - items to log.\n   */\n  forceError: LoggerForceFn;\n  /**\n   * Prints a log message into the console ignoring the `shouldLog` constructor\n   * option.\n   * @param args - items to log.\n   */\n  forceLog: LoggerForceFn;\n  /**\n   * Prints a warning message into the console ignoring the `shouldLog`\n   * constructor option.\n   * @param args - items to log.\n   */\n  forceWarn: LoggerForceFn;\n  /**\n   * Prints a log message into the console.\n   * @param args - items to log.\n   */\n  log: LoggerFn;\n  /**\n   * Prints a warning message into the console.\n   * @param args - items to log.\n   */\n  warn: LoggerFn;\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nexport function createLogger(scope: string, options?: LoggerOptions): Logger {\n  options ||= {};\n  const {\n    textColor,\n    bgColor,\n    shouldLog: optionsShouldLog,\n  } = options;\n  const shouldLogValue = optionsShouldLog === undefined ? true : optionsShouldLog;\n  const shouldLog = typeof shouldLogValue === 'boolean'\n    ? () => shouldLogValue\n    : shouldLogValue;\n\n  /**\n   * Prints a message into the console.\n   * @param level - log level.\n   * @param force - should `shouldLog` value be ignored.\n   * @param args - arguments.\n   */\n  const print = (level: LogLevel, force: boolean, ...args: any[]): void => {\n    if (force || shouldLog()) {\n      const commonCss = 'font-weight:bold;padding:0 5px;border-radius:100px';\n      const [timeBgColor, timeTextColor, prefix] = {\n        log: ['#0089c3', 'white', 'INFO'],\n        error: ['#ff0000F0', 'white', 'ERR'],\n        warn: ['#D38E15', 'white', 'WARN'],\n      }[level];\n      console[level](\n        `%c${prefix} ${\n          Intl\n            .DateTimeFormat('en-GB', {\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit',\n              fractionalSecondDigits: 3,\n              timeZone: 'UTC',\n            })\n            .format(new Date())\n        }%c %c${scope}`,\n        `${commonCss};background-color:${timeBgColor};color:${timeTextColor}`,\n        '',\n        `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n        ...args,\n      );\n    }\n  };\n\n  return ([\n    ['log', 'forceLog'],\n    ['warn', 'forceWarn'],\n    ['error', 'forceError'],\n  ] as const).reduce<Logger>((acc, [level, forceMethod]) => {\n    acc[level] = print.bind(undefined, level, false);\n    acc[forceMethod] = print.bind(undefined, level, true);\n    return acc;\n  }, {} as Logger);\n}"],"mappings":"AAIO,SAASA,EAAaC,CAAA,EAAuB;EAC3C,OAAAA,CAAA,CAAMC,OAAA,CAAQ,UAAWC,CAAA,IAAU,IAAIA,CAAA,CAAMC,WAAA,CAAa,GAAE;AACrE;ACEO,SAASC,EAA+BJ,CAAA,EAA+B;EACrE,OAAAA,CAAA,CAAMC,OAAA,CAAQ,UAAWC,CAAA,IAAU,IAAIA,CAAA,CAAMC,WAAA,CAAa,GAAE;AACrE;ACAO,SAASE,EAAsCL,CAAA,EAA0C;EACvF,OAAAM,MAAA,CAAOC,OAAA,CAAQP,CAAK,EAAEQ,MAAA,CAAuC,CAACN,CAAA,EAAAO,IAAA;IAAA,IAAK,CAACC,CAAA,EAAGC,CAAC,IAAAF,IAAA;IAAA,OACzEP,CAAA,CAAAE,CAAA,CAAaM,CAAC,CAAyC,IAAIC,CAAA,EACxDT,CAAA;EAAA,GACN,EAAoC;AACzC;ACNO,SAASU,EAA+BZ,CAAA,EAA+B;EACrE,OAAAA,CAAA,CAAMC,OAAA,CAAQ,WAAYC,CAAA,IAAMA,CAAA,CAAE,CAAC,EAAEW,WAAA,EAAa;AAC3D;ACDO,SAASC,EAAsCd,CAAA,EAA0C;EACvF,OAAAM,MAAA,CAAOC,OAAA,CAAQP,CAAK,EAAEQ,MAAA,CAAuC,CAACN,CAAA,EAAAa,KAAA;IAAA,IAAK,CAACL,CAAA,EAAGC,CAAC,IAAAI,KAAA;IAAA,OACzEb,CAAA,CAAAU,CAAA,CAAaF,CAAC,CAAyC,IAAIC,CAAA,EACxDT,CAAA;EAAA,GACN,EAAoC;AACzC;ACIO,SAASc,EACdhB,CAAA,EACoC;EAC9B,MAAAE,CAAA,GAAaY,CAAA,CAAoBd,CAAK;EAC5C,WAAWU,CAAA,IAAOR,CAAA,EAAY;IACtB,MAAAS,CAAA,GAAQT,CAAA,CAAWQ,CAAG;IACxBC,CAAA,IAAS,OAAOA,CAAA,IAAU,YAAY,EAAEA,CAAA,YAAiBM,IAAA,MAC1Df,CAAA,CAAmBQ,CAAG,IAAIQ,KAAA,CAAMC,OAAA,CAAQR,CAAK,IAC1CA,CAAA,CAAMS,GAAA,CAAIJ,CAAuB,IACjCA,CAAA,CAAwBL,CAAK;EACnC;EAEK,OAAAT,CAAA;AACT;AC5BO,SAASmB,EAAarB,CAAA,EAAuB;EAC3C,OAAAA,CAAA,CAAMC,OAAA,CAAQ,aAAa,CAACC,CAAA,EAAGQ,CAAA,KAAW,IAAIA,CAAA,CAAOP,WAAA,CAAY,CAAC,EAAE;AAC7E;ACFA,SAASmB,EAAUtB,CAAA,EAAqB;EACtC,OAAO,SAASA,CAAG;AACrB;AAOgB,SAAAuB,EAAmBvB,CAAA,EAAaE,CAAA,EAAgB;EAC9DsB,cAAA,CAAeC,OAAA,CAAQH,CAAA,CAAUtB,CAAG,GAAG0B,IAAA,CAAKC,SAAA,CAAUzB,CAAK,CAAC;AAC9D;AAMO,SAAS0B,EAAmB5B,CAAA,EAA4B;EAC7D,MAAME,CAAA,GAAQsB,cAAA,CAAeK,OAAA,CAAQP,CAAA,CAAUtB,CAAG,CAAC;EAC/C;IACF,OAAOE,CAAA,GAAQwB,IAAA,CAAKI,KAAA,CAAM5B,CAAK,IAAS;EAAA,QAClC;AAEV;ACrBO,SAAS6B,EAAA,EAGd;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHmClC,CAAA,OAAAkB,KAAA,CAAAc,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAAnC,CAAA,CAAAmC,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EAI7B,MAAAjC,CAAA,GAAYF,CAAA,CAAIoC,IAAA,CAAK,CAAC;EAErB,QACLlC,CAAA,CAAUmC,IAAA,CAAKC,IAAA,CAAKpC,CAAS,GAC7B,MAAM;IACJA,CAAA,CAAUqC,OAAA,CAAc7B,CAAA;MACnBA,CAAA;IAAA,CACJ;EAAA,EAEL;AACF;AAAA;ACmCgB,SAAA8B,EAAaxC,CAAA,EAAeE,CAAA,EAAiC;EAC3EA,CAAA,KAAAA,CAAA,GAAY,CAAC;EACP;MACJuC,SAAA,EAAA/B,CAAA;MACAgC,OAAA,EAAA/B,CAAA;MACAgC,SAAA,EAAWC;IAAA,IACT1C,CAAA;IACE2C,CAAA,GAAiBD,CAAA,KAAqB,SAAY,KAAOA,CAAA;IACzDE,CAAA,GAAY,OAAOD,CAAA,IAAmB,YACxC,MAAMA,CAAA,GACNA,CAAA;IAQEE,CAAA,GAAQ,SAAAC,CAACC,CAAA,EAAiBC,CAAA,EAAyC;MACnE,IAAAA,CAAA,IAASJ,CAAA,IAAa;QACxB,MAAMK,CAAA,GAAY;UACZ,CAACC,CAAA,EAAaC,CAAA,EAAeC,CAAM,IAAI;YAC3CC,GAAA,EAAK,CAAC,WAAW,SAAS,MAAM;YAChCC,KAAA,EAAO,CAAC,aAAa,SAAS,KAAK;YACnCC,IAAA,EAAM,CAAC,WAAW,SAAS,MAAM;UAAA,EACjCR,CAAK;QAAA,SAAAS,KAAA,GAAAzB,SAAA,CAAAC,MAAA,EAPwCyB,CAAA,OAAAzC,KAAA,CAAAwC,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;UAAAD,CAAA,CAAAC,KAAA,QAAA3B,SAAA,CAAA2B,KAAA;QAAA;QAQ/CC,OAAA,CAAQZ,CAAK,EACX,KAAKK,CAAM,IACTQ,IAAA,CACGC,cAAA,CAAe,SAAS;UACvBC,IAAA,EAAM;UACNC,MAAA,EAAQ;UACRC,MAAA,EAAQ;UACRC,sBAAA,EAAwB;UACxBC,QAAA,EAAU;QAAA,CACX,EACAC,MAAA,CAAO,mBAAIpD,IAAA,CAAM,EACtB,QAAQjB,CAAK,IACb,GAAGmD,CAAS,qBAAqBC,CAAW,UAAUC,CAAa,IACnE,IACA,GAAGF,CAAS,IAAIzC,CAAA,GAAY,SAASA,CAAS,MAAM,EAAE,GAAGC,CAAA,GAAU,oBAAoBA,CAAO,KAAK,EAAE,IACrG,GAAGgD,CACL;MAAA;IAEJ;EAEQ,QACN,CAAC,OAAO,UAAU,GAClB,CAAC,QAAQ,WAAW,GACpB,CAAC,SAAS,YAAY,GACZnD,MAAA,CAAe,CAACyC,CAAA,EAAAqB,KAAA;IAAA,IAAK,CAACpB,CAAA,EAAOS,CAAW,IAAAW,KAAA;IAAA,OAClDrB,CAAA,CAAIC,CAAK,IAAIH,CAAA,CAAMT,IAAA,CAAK,QAAWY,CAAA,EAAO,EAAK,GAC/CD,CAAA,CAAIU,CAAW,IAAIZ,CAAA,CAAMT,IAAA,CAAK,QAAWY,CAAA,EAAO,EAAI,GAC7CD,CAAA;EAAA,GACN,EAAY;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}