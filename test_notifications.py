#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

import requests
import json
import time

BASE_URL = "http://localhost:8001"

def test_notifications():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram)
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    init_data = "user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22Admin%22%2C%22username%22%3A%22testadmin%22%7D&auth_date=1234567890&hash=test_hash"
    
    auth_response = requests.post(f"{BASE_URL}/api/telegram/telegram-auth", json={
        "init_data": init_data
    })
    
    if auth_response.status_code == 200:
        auth_data = auth_response.json()
        token = auth_data["access_token"]
        print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {auth_data['user']['name']}")
        print(f"   Token: {token[:20]}...")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {auth_response.status_code}")
        print(f"   Response: {auth_response.text}")
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
    
    candidate_data = {
        "full_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        "telegram_id": "987654321",
        "telegram_username": "ivan_petrov",
        "results": "–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    }
    
    candidate_response = requests.post(f"{BASE_URL}/api/candidates", json=candidate_data)
    
    if candidate_response.status_code == 200:
        candidate = candidate_response.json()
        candidate_id = candidate["id"]
        print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–∑–¥–∞–Ω: {candidate['full_name']} (ID: {candidate_id})")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate_response.status_code}")
        print(f"   Response: {candidate_response.text}")
        return
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–Ω—Ç–µ—Ä–≤—å—é
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
    interview_questions = [
        {
            "question": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã",
            "answer": "–£ –º–µ–Ω—è –µ—Å—Ç—å 3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python –∏ JavaScript",
            "score": 8,
            "category": "–æ–ø—ã—Ç"
        },
        {
            "question": "–ö–∞–∫ –≤—ã —Ä–µ—à–∞–µ—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ?",
            "answer": "–Ø —Å—Ç–∞—Ä–∞—é—Å—å –≤—ã—Å–ª—É—à–∞—Ç—å –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "score": 7,
            "category": "soft_skills"
        },
        {
            "question": "–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ?",
            "answer": "–•–æ—á—É —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—å —Ç–∏–º–ª–∏–¥–æ–º",
            "score": 9,
            "category": "–º–æ—Ç–∏–≤–∞—Ü–∏—è"
        },
        {
            "question": "–ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
            "answer": "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞",
            "score": 8,
            "category": "–º–æ—Ç–∏–≤–∞—Ü–∏—è"
        },
        {
            "question": "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –¥–µ–¥–ª–∞–π–Ω–∞–º?",
            "answer": "–í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –≤–æ–≤—Ä–µ–º—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ",
            "score": 9,
            "category": "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
        }
    ]
    
    for i, question_data in enumerate(interview_questions, 1):
        print(f"   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ {i}/5...")
        
        interview_response = requests.post(
            f"{BASE_URL}/api/candidates/{candidate_id}/interview-logs",
            json=question_data
        )
        
        if interview_response.status_code == 200:
            print(f"   ‚úÖ –í–æ–ø—Ä–æ—Å {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ {i}: {interview_response.status_code}")
            print(f"      Response: {interview_response.text}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    
    test_notification_response = requests.post(f"{BASE_URL}/api/candidates/{candidate_id}/test-notification")
    
    if test_notification_response.status_code == 200:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {test_notification_response.status_code}")
        print(f"   Response: {test_notification_response.text}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
    
    candidate_status_response = requests.get(f"{BASE_URL}/api/candidates/{candidate_id}")
    
    if candidate_status_response.status_code == 200:
        candidate_status = candidate_status_response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate_status['status']}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {candidate_status['last_action_type']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {candidate_status_response.status_code}")
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç–∞ - –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    print("   - –û –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é")
    print("   - –û –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é")
    print("   - –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

if __name__ == "__main__":
    try:
        test_notifications()
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8001")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}") 