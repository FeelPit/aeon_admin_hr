#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    if check_file_exists("backend/requirements.txt", "Python requirements"):
        with open("backend/requirements.txt", "r") as f:
            content = f.read()
            if "fastapi" in content and "uvicorn" in content:
                print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ FastAPI –Ω–∞–π–¥–µ–Ω—ã")
                return True
            else:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ FastAPI")
                return False
    return False

def check_package_json():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç package.json"""
    if check_file_exists("frontend/package.json", "Node.js package.json"):
        with open("frontend/package.json", "r") as f:
            content = f.read()
            if "react" in content and "build" in content:
                print("‚úÖ React –∏ build script –Ω–∞–π–¥–µ–Ω—ã")
                return True
            else:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç React –∏–ª–∏ build script")
                return False
    return False

def check_render_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è Render"""
    files_to_check = [
        ("render.yaml", "Render –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("build.sh", "–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏"),
        ("start.sh", "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞"),
        ("backend/Dockerfile", "Dockerfile –¥–ª—è –±—ç–∫–µ–Ω–¥–∞"),
    ]
    
    all_exist = True
    for file_path, description in files_to_check:
        if not check_file_exists(file_path, description):
            all_exist = False
    
    return all_exist

def check_scripts_permissions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    scripts = ["build.sh", "start.sh"]
    all_executable = True
    
    for script in scripts:
        if os.path.exists(script):
            if os.access(script, os.X_OK):
                print(f"‚úÖ {script} - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
            else:
                print(f"‚ùå {script} - –ù–ï –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
                all_executable = False
        else:
            print(f"‚ùå {script} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_executable = False
    
    return all_executable

def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = [
        "DATABASE_URL",
        "SECRET_KEY", 
        "BOT_TOKEN"
    ]
    
    optional_vars = [
        "NOTION_TOKEN",
        "NOTION_DATABASE_ID",
        "TELEGRAM_CHAT_ID"
    ]
    
    print("\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ:")
    for var in required_vars:
        print(f"  - {var}")
    
    print("\n–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ:")
    for var in optional_vars:
        print(f"  - {var}")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render")
    print("=" * 50)
    
    checks = [
        ("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", check_render_files),
        ("Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_requirements),
        ("Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_package_json),
        ("–ü—Ä–∞–≤–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã", check_scripts_permissions),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_env_variables),
    ]
    
    results = []
    for description, check_func in checks:
        print(f"\nüîç {description}:")
        try:
            result = check_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    
    if all(results):
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—à—å—Ç–µ –∫–æ–¥ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ Render.com")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Blueprint –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π")
        print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: RENDER_DEPLOYMENT.md")
    else:
        print("‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        sys.exit(1)

if __name__ == "__main__":
    main() 