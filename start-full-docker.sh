#!/bin/bash

# üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ HR Admin System —Å Docker –∏ Cloudflare Tunnel
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ Docker –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}üöÄ $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cloudflared
    if ! command -v cloudflared &> /dev/null; then
        print_warning "cloudflared –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            brew install cloudflare/cloudflare/cloudflared
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Linux
            wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
            sudo dpkg -i cloudflared-linux-amd64.deb
            rm cloudflared-linux-amd64.deb
        else
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ cloudflared –≤—Ä—É—á–Ω—É—é."
            exit 1
        fi
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_existing_containers() {
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if docker-compose ps | grep -q "Up"; then
        docker-compose down
        print_success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_info "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_docker_services() {
    print_header "–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    print_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose ps
    
    print_success "Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
check_api_health() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s http://localhost:8000/api/health > /dev/null; then
            print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return 0
        fi
        
        print_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤..."
        sleep 2
        ((attempt++))
    done
    
    print_error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare Tunnel
setup_cloudflare_tunnel() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare Tunnel..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É–Ω–Ω–µ–ª–∏
    if [ -f ".cloudflared.pid" ] || [ -f ".cloudflared-backend.pid" ] || [ -f ".cloudflared-frontend.pid" ]; then
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É–Ω–Ω–µ–ª–µ–π..."
        ./stop-cloudflare.sh > /dev/null 2>&1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª–∏ –¥–ª—è backend –∏ frontend
    print_info "–ó–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª–µ–π..."
    
    # Backend API —Ç—É–Ω–Ω–µ–ª—å
    cloudflared tunnel --url http://localhost:8000 > cloudflared-backend.log 2>&1 &
    local backend_pid=$!
    echo $backend_pid > .cloudflared-backend.pid
    
    # Frontend —Ç—É–Ω–Ω–µ–ª—å
    cloudflared tunnel --url http://localhost:3002 > cloudflared-frontend.log 2>&1 &
    local frontend_pid=$!
    echo $frontend_pid > .cloudflared-frontend.pid
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ç—É–Ω–Ω–µ–ª–µ–π
    sleep 5
    
    if kill -0 $backend_pid 2>/dev/null && kill -0 $frontend_pid 2>/dev/null; then
        print_success "Cloudflare Tunnel –∑–∞–ø—É—â–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª–µ–π
        local backend_url=$(grep -o "https://.*trycloudflare.com" cloudflared-backend.log 2>/dev/null | head -1)
        local frontend_url=$(grep -o "https://.*trycloudflare.com" cloudflared-frontend.log 2>/dev/null | head -1)
        
        if [ -n "$backend_url" ]; then
            print_success "Backend API: $backend_url"
        fi
        
        if [ -n "$frontend_url" ]; then
            print_success "Frontend: $frontend_url"
        fi
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cloudflare Tunnel"
        return 1
    fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    print_header "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ"
    
    echo ""
    echo "üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:"
    echo "   Frontend: http://localhost:3002"
    echo "   Backend API: http://localhost:8000"
    echo "   API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
    echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:8000/api/health"
    echo ""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP
    local public_ip=$(curl -s ifconfig.me 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    echo "üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø:"
    echo "   –í–∞—à IP: $public_ip"
    echo "   –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø: http://$public_ip:8000 (–µ—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç)"
    echo ""
    
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./stop-full-docker.sh"
    echo "   –õ–æ–≥–∏: docker-compose logs -f"
    echo "   –°—Ç–∞—Ç—É—Å: docker-compose ps"
    echo ""
    
    echo "üìä Cloudflare Tunnel:"
    echo "   Backend API: $(grep -o 'https://.*trycloudflare.com' cloudflared-backend.log 2>/dev/null | head -1 || echo '–Ω–µ –≥–æ—Ç–æ–≤')"
    echo "   Frontend: $(grep -o 'https://.*trycloudflare.com' cloudflared-frontend.log 2>/dev/null | head -1 || echo '–Ω–µ –≥–æ—Ç–æ–≤')"
    echo "   –õ–æ–≥–∏ backend: tail -f cloudflared-backend.log"
    echo "   –õ–æ–≥–∏ frontend: tail -f cloudflared-frontend.log"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—É–Ω–Ω–µ–ª–µ–π: ./stop-cloudflare.sh"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header "–ó–∞–ø—É—Å–∫ HR Admin System —Å Docker –∏ Cloudflare Tunnel"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    stop_existing_containers
    
    # –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
    start_docker_services
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if ! check_api_health; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs backend"
        exit 1
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare Tunnel
    if setup_cloudflare_tunnel; then
        print_success "Cloudflare Tunnel –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_warning "Cloudflare Tunnel –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é."
    fi
    
    # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    show_access_info
    
    print_success "üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω–∞!"
    print_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./stop-full-docker.sh"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
cleanup() {
    print_info "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    if [ -f ".cloudflared.pid" ]; then
        local tunnel_pid=$(cat .cloudflared.pid)
        if kill -0 $tunnel_pid 2>/dev/null; then
            kill $tunnel_pid
            print_info "Cloudflare Tunnel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        rm -f .cloudflared.pid
    fi
    exit 0
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 